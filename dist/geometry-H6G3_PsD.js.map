{"version":3,"file":"geometry-H6G3_PsD.js","sources":["../src/math/point.ts","../src/math/matrix.ts","../src/math/geometry.ts"],"sourcesContent":["export interface Point { x: number, y: number }\nexport function point(value: [number, number]): Point\nexport function point(value: Point): Point\nexport function point(x: number, y: number): Point\nexport function point() {\n    return arguments.length === 1 ?\n        Array.isArray(arguments[0]) ? Object.freeze({ x: arguments[0][0], y: arguments[0][1] })\n            : Object.freeze({ x: arguments[0].x, y: arguments[0].y })\n        :\n        Object.freeze({ x: arguments[0], y: arguments[1] })\n}\nexport const zeroAjsPoint = (point: Point) => {\n    const NEAR_ZERO = 1e-10\n\n    return Object.freeze({\n        x: Math.abs(point.x) < NEAR_ZERO ? 0 : point.x,\n        y: Math.abs(point.y) < NEAR_ZERO ? 0 : point.y,\n    })\n}\nexport enum CmpPoint {\n    LESS = -1,\n    EQUAL = 0,\n    MORE = 1,\n    OTHER = 2,\n}\nexport const cmpPoint = (p1: Point, p2: Point) => (p1.x === p2.x && p1.y === p2.y) ?\n    CmpPoint.EQUAL : (p1.x > p2.x && p1.y > p2.y) ?\n        CmpPoint.MORE : (p1.x < p2.x && p1.y < p2.y) ?\n            CmpPoint.LESS : CmpPoint.OTHER\nexport const roundPoint = (point: Point) => Object.freeze({ x: Math.round(point.x), y: Math.round(point.y) })\nexport const absPoint = (point: Point) => Object.freeze({ x: Math.abs(point.x), y: Math.abs(point.y) })\nexport const addPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x + p1.x, y: p2.y + p1.y })\nexport const subPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x - p1.x, y: p2.y - p1.y })\nexport const divPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x / p1.x, y: p2.y / p1.y })\nexport const mulPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x * p1.x, y: p2.y * p1.y })\nexport const rotatePoint = (point: Point, angle: number, origin: Point) => {\n    const radians = (Math.PI / 180) * angle\n    const cos = Math.cos(radians)\n    const sin = Math.sin(radians)\n\n    return Object.freeze({\n        x: cos * (point.x - origin.x) + sin * (point.y - origin.y) + origin.x,\n        y: cos * (point.y - origin.y) - sin * (point.x - origin.x) + origin.y\n    })\n}\nexport const rotatePoints = (points: Point[], angle: number, origin: Point) => {\n    return points.map(point => rotatePoint(point, angle, origin))\n}","import { point, Point, rotatePoints } from './point'\n\n/**\n * Mathematical utilities.\n * @module math\n * @license MIT\n *\n * @copyright 2010 Alexis Deveria, 2010 Jeff Schiller\n */\n\n/**\n * @typedef {PlainObject} module:math.AngleCoord45\n * @property {Float} x - The angle-snapped x value\n * @property {Float} y - The angle-snapped y value\n * @property {Integer} a - The angle at which to snap\n */\n\n/**\n * @typedef {PlainObject} module:math.XYObject\n * @property {Float} x\n * @property {Float} y\n */\n\n// Constants\nconst NEAR_ZERO = 1e-14\n\n\n/**\n * A (hopefully) quicker function to transform a point by a matrix\n * (this function avoids any DOM calls and just does the math).\n * @function module:math.transformPoint\n * @param {Point} point - Float representing the x coordinate\n * @param {DOMMatrix} m - Matrix object to transform the point with\n * @returns {module:Point} representing the transformed point\n */\nexport const transformPoint = (m: DOMMatrix, p: Point) =>\n    point(m.a * p.x + m.c * p.y + m.e, m.b * p.x + m.d * p.y + m.f)\n\n/**\n * Calculate an array of points transformed with an affine matrix\n * @function module:math.transformPoints\n * @param {DOMMatrix} matrix Affine Matrix\n * @param {Point[]} points Array of point\n * @returns {Point[]} Array of point\n */\nexport const transformPoints = (m: DOMMatrix, points: Point[]) => {\n    return points.map(point => transformPoint(m, point))\n}\n\n/**\n * Helper function to check if the matrix performs no actual transform\n * (i.e. exists for identity purposes).\n * @function module:math.isIdentity\n * @param {DOMMatrix} m - The matrix object to check\n * @returns {boolean} Indicates whether or not the matrix is 1,0,0,1,0,0\n */\nexport const isIdentity = (m: DOMMatrix) => {\n    return (\n        m.a === 1 && m.b === 0 && m.c === 0 && m.d === 1 && m.e === 0 && m.f === 0\n    )\n}\n\n/**\n * This function tries to return a `DOMMatrix` that is the multiplication `m1 * m2`.\n * We also round to zero when it's near zero.\n * @function module:math.matrixMultiply\n * @param {...DOMMatrix} args - Matrix objects to multiply\n * @returns {DOMMatrix} The matrix object resulting from the calculation\n */\nexport const matrixMultiply = (...args: DOMMatrix[]): DOMMatrix => {\n    const m = args.reduceRight((prev, m1) => {\n        return m1.multiply(prev)\n    })\n\n    if (Math.abs(m.a) < NEAR_ZERO) {\n        m.a = 0\n    }\n    if (Math.abs(m.b) < NEAR_ZERO) {\n        m.b = 0\n    }\n    if (Math.abs(m.c) < NEAR_ZERO) {\n        m.c = 0\n    }\n    if (Math.abs(m.d) < NEAR_ZERO) {\n        m.d = 0\n    }\n    if (Math.abs(m.e) < NEAR_ZERO) {\n        m.e = 0\n    }\n    if (Math.abs(m.f) < NEAR_ZERO) {\n        m.f = 0\n    }\n\n    return m\n}\n\n/**\n * See if the given transformlist includes a non-indentity matrix transform.\n * @function module:math.hasMatrixTransform\n * @param {SVGTransformList} [tlist] - The transformlist to check\n * @returns {boolean} Whether or not a matrix transform was found\n */\nexport const hasMatrixTransform = (tlist: SVGTransformList) => {\n    if (!tlist) {\n        return false\n    }\n    let num = tlist.numberOfItems\n    while (num--) {\n        const xform = tlist.getItem(num)\n        if (xform.type === 1 && !isIdentity(xform.matrix)) {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * @typedef {PlainObject} module:math.TransformedBox An object with the following values\n * @property {module:math.XYObject} tl - The top left coordinate\n * @property {module:math.XYObject} tr - The top right coordinate\n * @property {module:math.XYObject} bl - The bottom left coordinate\n * @property {module:math.XYObject} br - The bottom right coordinate\n * @property {PlainObject} aabox - Object with the following values:\n * @property {Float} aabox.x - Float with the axis-aligned x coordinate\n * @property {Float} aabox.y - Float with the axis-aligned y coordinate\n * @property {Float} aabox.width - Float with the axis-aligned width coordinate\n * @property {Float} aabox.height - Float with the axis-aligned height coordinate\n */\nexport interface TransformedBox {\n    tl: Point,\n    tr: Point,\n    br: Point,\n    bl: Point,\n    aabox: {\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    }\n}\n\n/**\n * Returns a 45 degree angle coordinate associated with the two given\n * coordinates.\n * @function module:math.snapToAngle\n * @param {Integer} x1 - First coordinate's x value\n * @param {Integer} y1 - First coordinate's y value\n * @param {Integer} x2 - Second coordinate's x value\n * @param {Integer} y2 - Second coordinate's y value\n * @returns {module:math.AngleCoord45}\n */\nexport const snapToAngle = (x1: number, y1: number, x2: number, y2: number) => {\n    const snap = Math.PI / 4 // 45 degrees\n    const dx = x2 - x1\n    const dy = y2 - y1\n    const angle = Math.atan2(dy, dx)\n    const dist = Math.sqrt(dx * dx + dy * dy)\n    const snapangle = Math.round(angle / snap) * snap\n\n    return {\n        x: x1 + dist * Math.cos(snapangle),\n        y: y1 + dist * Math.sin(snapangle),\n        a: snapangle\n    }\n}\n\n/**\n * Check if two rectangles (BBoxes objects) intersect each other.\n * @function module:math.rectsIntersect\n * @param {SVGRect} r1 - The first BBox-like object\n * @param {SVGRect} r2 - The second BBox-like object\n * @returns {boolean} True if rectangles intersect\n */\nexport const rectsIntersect = (r1: SVGRect, r2: SVGRect) => {\n    return (\n        r2.x < r1.x + r1.width &&\n        r2.x + r2.width > r1.x &&\n        r2.y < r1.y + r1.height &&\n        r2.y + r2.height > r1.y\n    )\n}\n\nexport const toTransformBox = (\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    angle: number = 0,\n    origin?: Point,\n): TransformedBox => {\n    const org = origin ? origin : point(x + (width / 2), y + (height / 2))\n    const [tl, tr, br, bl] = rotatePoints([\n        point(x, y),\n        point(x + width, y),\n        point(x + width, y + height),\n        point(x, y + height)\n    ], -angle, org)\n\n    const minx = Math.min(tl.x, tr.x, bl.x, br.x)\n    const maxx = Math.max(tl.x, tr.x, bl.x, br.x)\n    const miny = Math.min(tl.y, tr.y, bl.y, br.y)\n    const maxy = Math.max(tl.y, tr.y, bl.y, br.y)\n\n    return {\n        tl,\n        tr,\n        br,\n        bl,\n        aabox: {\n            x: minx,\n            y: miny,\n            width: maxx - minx,\n            height: maxy - miny\n        }\n    }\n}\n\nexport const svgInfo = (\n    ref: SVGSVGElement,\n    _props: '*' | 'width' | 'height' | 'viewBox' = \"*\"\n) => {\n    const svg = ref\n    const box = svg.getBBox()\n    const viewBox = [box.x, box.y, box.width, box.height].join(\" \")\n    const vX = box.x\n    const vY = box.y\n    const vWidth = box.width\n    const vHeight = box.height\n    const width = svg.width.baseVal.value\n    const height = svg.height.baseVal.value\n    const x = svg.x.baseVal.value\n    const y = svg.y.baseVal.value\n\n    return {\n        x,\n        y,\n        width,\n        height,\n        viewBox,\n        vX,\n        vY,\n        vWidth,\n        vHeight,\n    }\n}\n\nexport class Transform {\n    x: number\n    y: number\n    rotate: number\n    scaleX: number\n    scaleY: number\n    element: HTMLElement\n\n    constructor(element: HTMLElement) {\n        this.x = 0\n        this.y = 0\n        this.scaleX = 1\n        this.scaleY = 1\n        this.rotate = 0\n        this.element = element\n        this.#parse(this.element.style.transform)\n    }\n    \n    public get transform(): {x: number, y: number, rotate: number, scaleX: number, scaleY: number } {\n        this.#parse(this.element.style.transform)\n        return { x: this.x, y: this.y, rotate: this.rotate, scaleX: this.scaleX, scaleY: this.scaleY }\n    }\n    public set transform(transform: string) { this.#parse(transform) }\n\n    #parse(transform: string) {\n        if (transform) {\n            const transformTrim = transform.replace(/, /g, ',')\n            .replace(/px/g, '')\n            const translate = /translate\\(\\s*([^\\s,)]+)[ ,]([^\\s,)]+)/.exec(transformTrim)\n            const scale2d = /scale\\(\\s*([^\\s,)]+)[ ,]([^\\s,)]+)/.exec(transformTrim)\n            const rotate = /rotate\\(\\s*([^\\s,)]+)/.exec(transformTrim)\n\n            if(translate) {\n                this.x = +translate[1]\n                this.y = +translate[2]\n            }\n\n            if(scale2d) {\n                this.scaleX = +scale2d[1]\n                this.scaleY = +scale2d[2]\n            } else {\n                const scale = /scale\\(\\s*([^\\s,)]+)/.exec(transformTrim)\n                if(scale) {\n                    this.scaleX = +scale[1]\n                    this.scaleY = +scale[1]\n                }\n            }\n\n            if(rotate) {\n                this.rotate = +rotate[1]\n            }\n        }\n    }\n}","import { Point } from \"./point\"\n\nexport type LineEquation = { m: number, c: number }\nexport const lineEquation = (p1: Point, p2: Point): LineEquation => {\n    const m = (p2.y - p1.y) / (p2.x - p1.x)\n    const c = p1.y - m * p1.x\n    return { m, c }\n}\nexport const linesDistance = (l1: LineEquation, l2: LineEquation) => {\n    return Math.abs(l2.c - l1.c) / Math.sqrt(1 + l1.m ** 2)\n}\nexport const distancePointFromLine = (p: Point, ls: Point, le: Point) => {\n    return (\n        (le.x - ls.x) * (ls.y - p.y) - (le.y - ls.y) * (ls.x - p.x)\n    ) / Math.sqrt((le.x - ls.x) ** 2 + (le.y - ls.y) ** 2)\n}\nexport const reflectPointOverLine = (line: LineEquation, point: Point) => {\n    return {\n        x: (point.x + line.m * (point.y - line.c)) / (1 + line.m ** 2),\n        y: (line.m * point.x - point.y + 2 * line.c) / (1 + line.m ** 2),\n    }\n}"],"names":["point","arguments","length","Array","isArray","Object","freeze","x","y","zeroAjsPoint","Math","abs","NEAR_ZERO","CmpPoint","LESS","EQUAL","MORE","OTHER","cmpPoint","p1","p2","roundPoint","round","absPoint","addPoint","subPoint","divPoint","mulPoint","rotatePoint","angle","origin","radians","PI","cos","sin","rotatePoints","points","map","transformPoint","m","p","a","c","e","b","d","f","transformPoints","isIdentity","matrixMultiply","args","reduceRight","prev","m1","multiply","hasMatrixTransform","tlist","num","numberOfItems","xform","getItem","type","matrix","snapToAngle","x1","y1","x2","y2","snap","dx","dy","atan2","dist","sqrt","snapangle","rectsIntersect","r1","r2","width","height","toTransformBox","org","tl","tr","br","bl","minx","min","maxx","max","miny","maxy","aabox","svgInfo","ref","_props","svg","box","getBBox","viewBox","join","vX","vY","vWidth","vHeight","baseVal","value","_parse","parse_fn","Transform","constructor","element","__privateAdd","rotate","scaleX","scaleY","__privateMethod","style","transform","transformTrim","replace","translate","exec","scale2d","scale","lineEquation","linesDistance","l1","l2","distancePointFromLine","ls","le","reflectPointOverLine","line"],"mappings":"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"}