import { C as c, T as d, a as u, b as l, c as P, d as p, e as f, q as T, n as x, l as E, h as g, o as h, m as v, p as I, v as b, i as y, f as z, g as C, r as S, u as q, s as F, w as H, t as M, j as W, k as X, z as j } from "./geometry-2uHTdEjL.js";
import { a as A, r as L, b as V, u as k } from "./helper-3XeWbX50.js";
const o = (t) => 100 * t / document.documentElement.clientWidth, n = (t) => 100 * t / document.documentElement.clientHeight, e = (t) => document.documentElement.clientHeight * t / 100, s = (t) => document.documentElement.clientWidth * t / 100, a = (t) => t * parseFloat(getComputedStyle(document.documentElement).fontSize), i = (t) => t / parseFloat(getComputedStyle(document.documentElement).fontSize);
export {
  c as CmpPoint,
  d as Transform,
  u as absPoint,
  l as addPoint,
  P as cmpPoint,
  p as distancePointFromLine,
  f as divPoint,
  T as hasMatrixTransform,
  x as isIdentity,
  E as lineEquation,
  g as linesDistance,
  h as matrixMultiply,
  v as mulPoint,
  I as point,
  i as pxToREM,
  n as pxToVH,
  o as pxToVW,
  A as random,
  L as randomId,
  V as randomItem,
  b as rectsIntersect,
  y as reflectPointOverLine,
  a as remToPX,
  z as rotatePoint,
  C as rotatePoints,
  S as roundPoint,
  q as snapToAngle,
  F as subPoint,
  H as svgInfo,
  M as toTransformBox,
  W as transformPoint,
  X as transformPoints,
  k as uniqueId,
  e as vhToPX,
  s as vwToPX,
  j as zeroAjsPoint
};
//# sourceMappingURL=math.js.map
