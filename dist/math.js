import { C as c, a as d, b as u, c as l, h as P, d as p, o as f, k as x, l as T, g as E, n as g, m as h, p as v, u as I, i as b, e as y, f as z, r as C, q as S, s as q, w as F, v as H, t as M, j as W, z as X } from "./matrix-T0Pr0xQM.js";
import { r as w, b as A, a as L, u as V } from "./helper-UFx9kGlF.js";
const o = (t) => 100 * t / document.documentElement.clientWidth, n = (t) => 100 * t / document.documentElement.clientHeight, e = (t) => document.documentElement.clientHeight * t / 100, s = (t) => document.documentElement.clientWidth * t / 100, a = (t) => t * parseFloat(getComputedStyle(document.documentElement).fontSize), i = (t) => t / parseFloat(getComputedStyle(document.documentElement).fontSize);
export {
  c as CmpPoint,
  d as absPoint,
  u as addPoint,
  l as cmpPoint,
  P as distancePointFromLine,
  p as divPoint,
  f as hasMatrixTransform,
  x as isIdentity,
  T as lineEquation,
  E as linesDistance,
  g as matrixMultiply,
  h as mulPoint,
  v as point,
  i as pxToREM,
  n as pxToVH,
  o as pxToVW,
  w as random,
  A as randomId,
  L as randomItem,
  I as rectsIntersect,
  b as reflectPointOverLine,
  a as remToPX,
  y as rotatePoint,
  z as rotatePoints,
  C as roundPoint,
  S as snapToAngle,
  q as subPoint,
  F as svgInfo,
  H as toTransformBox,
  M as transformPoint,
  W as transformPoints,
  V as uniqueId,
  e as vhToPX,
  s as vwToPX,
  X as zeroAjsPoint
};
//# sourceMappingURL=math.js.map
