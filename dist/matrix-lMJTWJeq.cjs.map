{"version":3,"file":"matrix-lMJTWJeq.cjs","sources":["../src/math/geometry.ts","../src/math/point.ts","../src/math/matrix.ts"],"sourcesContent":["import { Point } from \"./point\"\n\nexport type LineEquation = { m: number, c: number }\nexport const lineEquation = (p1: Point, p2: Point): LineEquation => {\n    const m = (p2.y - p1.y) / (p2.x - p1.x)\n    const c = p1.y - m * p1.x\n    return { m, c }\n}\nexport const linesDistance = (l1: LineEquation, l2: LineEquation) => {\n    return Math.abs(l2.c - l1.c) / Math.sqrt(1 + l1.m ** 2)\n}\nexport const distancePointFromLine = (p: Point, ls: Point, le: Point) => {\n    return (\n        (le.x - ls.x) * (ls.y - p.y) - (le.y - ls.y) * (ls.x - p.x)\n    ) / Math.sqrt((le.x - ls.x) ** 2 + (le.y - ls.y) ** 2)\n}\nexport const reflectPointOverLine = (line: LineEquation, point: Point) => {\n    return {\n        x: (point.x + line.m * (point.y - line.c)) / (1 + line.m ** 2),\n        y: (line.m * point.x - point.y + 2 * line.c) / (1 + line.m ** 2),\n    }\n}","export interface Point { x: number, y: number }\nexport function point(value: [number, number]): Point\nexport function point(value: Point): Point\nexport function point(x: number, y: number): Point\nexport function point() {\n    return arguments.length === 1 ?\n        Array.isArray(arguments[0]) ? Object.freeze({ x: arguments[0][0], y: arguments[0][1] })\n            : Object.freeze({ x: arguments[0].x, y: arguments[0].y })\n        :\n        Object.freeze({ x: arguments[0], y: arguments[1] })\n}\nexport const zeroAjsPoint = (point: Point) => {\n    const NEAR_ZERO = 1e-10\n\n    return Object.freeze({\n        x: Math.abs(point.x) < NEAR_ZERO ? 0 : point.x,\n        y: Math.abs(point.y) < NEAR_ZERO ? 0 : point.y,\n    })\n}\nexport enum CmpPoint {\n    LESS = -1,\n    EQUAL = 0,\n    MORE = 1,\n    OTHER = 2,\n}\nexport const cmpPoint = (p1: Point, p2: Point) => (p1.x === p2.x && p1.y === p2.y) ?\n    CmpPoint.EQUAL : (p1.x > p2.x && p1.y > p2.y) ?\n        CmpPoint.MORE : (p1.x < p2.x && p1.y < p2.y) ?\n            CmpPoint.LESS : CmpPoint.OTHER\nexport const roundPoint = (point: Point) => Object.freeze({ x: Math.round(point.x), y: Math.round(point.y) })\nexport const absPoint = (point: Point) => Object.freeze({ x: Math.abs(point.x), y: Math.abs(point.y) })\nexport const addPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x + p1.x, y: p2.y + p1.y })\nexport const subPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x - p1.x, y: p2.y - p1.y })\nexport const divPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x / p1.x, y: p2.y / p1.y })\nexport const mulPoint = (p2: Point, p1: Point) => Object.freeze({ x: p2.x * p1.x, y: p2.y * p1.y })\nexport const rotatePoint = (point: Point, angle: number, origin: Point) => {\n    const radians = (Math.PI / 180) * angle\n    const cos = Math.cos(radians)\n    const sin = Math.sin(radians)\n\n    return Object.freeze({\n        x: cos * (point.x - origin.x) + sin * (point.y - origin.y) + origin.x,\n        y: cos * (point.y - origin.y) - sin * (point.x - origin.x) + origin.y\n    })\n}\nexport const rotatePoints = (points: Point[], angle: number, origin: Point) => {\n    return points.map(point => rotatePoint(point, angle, origin))\n}","import { point, Point, rotatePoints } from './point'\n\n/**\n * Mathematical utilities.\n * @module math\n * @license MIT\n *\n * @copyright 2010 Alexis Deveria, 2010 Jeff Schiller\n */\n\n/**\n * @typedef {PlainObject} module:math.AngleCoord45\n * @property {Float} x - The angle-snapped x value\n * @property {Float} y - The angle-snapped y value\n * @property {Integer} a - The angle at which to snap\n */\n\n/**\n * @typedef {PlainObject} module:math.XYObject\n * @property {Float} x\n * @property {Float} y\n */\n\n// Constants\nconst NEAR_ZERO = 1e-14\n\n\n/**\n * A (hopefully) quicker function to transform a point by a matrix\n * (this function avoids any DOM calls and just does the math).\n * @function module:math.transformPoint\n * @param {Point} point - Float representing the x coordinate\n * @param {DOMMatrix} m - Matrix object to transform the point with\n * @returns {module:Point} representing the transformed point\n */\nexport const transformPoint = (m: DOMMatrix, p: Point) =>\n    point(m.a * p.x + m.c * p.y + m.e, m.b * p.x + m.d * p.y + m.f)\n\n/**\n * Calculate an array of points transformed with an affine matrix\n * @function module:math.transformPoints\n * @param {DOMMatrix} matrix Affine Matrix\n * @param {Point[]} points Array of point\n * @returns {Point[]} Array of point\n */\nexport const transformPoints = (m: DOMMatrix, points: Point[]) => {\n    return points.map(point => transformPoint(m, point))\n}\n\n/**\n * Helper function to check if the matrix performs no actual transform\n * (i.e. exists for identity purposes).\n * @function module:math.isIdentity\n * @param {DOMMatrix} m - The matrix object to check\n * @returns {boolean} Indicates whether or not the matrix is 1,0,0,1,0,0\n */\nexport const isIdentity = (m: DOMMatrix) => {\n    return (\n        m.a === 1 && m.b === 0 && m.c === 0 && m.d === 1 && m.e === 0 && m.f === 0\n    )\n}\n\n/**\n * This function tries to return a `DOMMatrix` that is the multiplication `m1 * m2`.\n * We also round to zero when it's near zero.\n * @function module:math.matrixMultiply\n * @param {...DOMMatrix} args - Matrix objects to multiply\n * @returns {DOMMatrix} The matrix object resulting from the calculation\n */\nexport const matrixMultiply = (...args: DOMMatrix[]): DOMMatrix => {\n    const m = args.reduceRight((prev, m1) => {\n        return m1.multiply(prev)\n    })\n\n    if (Math.abs(m.a) < NEAR_ZERO) {\n        m.a = 0\n    }\n    if (Math.abs(m.b) < NEAR_ZERO) {\n        m.b = 0\n    }\n    if (Math.abs(m.c) < NEAR_ZERO) {\n        m.c = 0\n    }\n    if (Math.abs(m.d) < NEAR_ZERO) {\n        m.d = 0\n    }\n    if (Math.abs(m.e) < NEAR_ZERO) {\n        m.e = 0\n    }\n    if (Math.abs(m.f) < NEAR_ZERO) {\n        m.f = 0\n    }\n\n    return m\n}\n\n/**\n * See if the given transformlist includes a non-indentity matrix transform.\n * @function module:math.hasMatrixTransform\n * @param {SVGTransformList} [tlist] - The transformlist to check\n * @returns {boolean} Whether or not a matrix transform was found\n */\nexport const hasMatrixTransform = (tlist: SVGTransformList) => {\n    if (!tlist) {\n        return false\n    }\n    let num = tlist.numberOfItems\n    while (num--) {\n        const xform = tlist.getItem(num)\n        if (xform.type === 1 && !isIdentity(xform.matrix)) {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * @typedef {PlainObject} module:math.TransformedBox An object with the following values\n * @property {module:math.XYObject} tl - The top left coordinate\n * @property {module:math.XYObject} tr - The top right coordinate\n * @property {module:math.XYObject} bl - The bottom left coordinate\n * @property {module:math.XYObject} br - The bottom right coordinate\n * @property {PlainObject} aabox - Object with the following values:\n * @property {Float} aabox.x - Float with the axis-aligned x coordinate\n * @property {Float} aabox.y - Float with the axis-aligned y coordinate\n * @property {Float} aabox.width - Float with the axis-aligned width coordinate\n * @property {Float} aabox.height - Float with the axis-aligned height coordinate\n */\nexport interface TransformedBox {\n    tl: Point,\n    tr: Point,\n    br: Point,\n    bl: Point,\n    aabox: {\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    }\n}\n\n/**\n * Returns a 45 degree angle coordinate associated with the two given\n * coordinates.\n * @function module:math.snapToAngle\n * @param {Integer} x1 - First coordinate's x value\n * @param {Integer} y1 - First coordinate's y value\n * @param {Integer} x2 - Second coordinate's x value\n * @param {Integer} y2 - Second coordinate's y value\n * @returns {module:math.AngleCoord45}\n */\nexport const snapToAngle = (x1: number, y1: number, x2: number, y2: number) => {\n    const snap = Math.PI / 4 // 45 degrees\n    const dx = x2 - x1\n    const dy = y2 - y1\n    const angle = Math.atan2(dy, dx)\n    const dist = Math.sqrt(dx * dx + dy * dy)\n    const snapangle = Math.round(angle / snap) * snap\n\n    return {\n        x: x1 + dist * Math.cos(snapangle),\n        y: y1 + dist * Math.sin(snapangle),\n        a: snapangle\n    }\n}\n\n/**\n * Check if two rectangles (BBoxes objects) intersect each other.\n * @function module:math.rectsIntersect\n * @param {SVGRect} r1 - The first BBox-like object\n * @param {SVGRect} r2 - The second BBox-like object\n * @returns {boolean} True if rectangles intersect\n */\nexport const rectsIntersect = (r1: SVGRect, r2: SVGRect) => {\n    return (\n        r2.x < r1.x + r1.width &&\n        r2.x + r2.width > r1.x &&\n        r2.y < r1.y + r1.height &&\n        r2.y + r2.height > r1.y\n    )\n}\n\nexport const toTransformBox = (\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    angle: number = 0,\n    origin?: Point,\n): TransformedBox => {\n    const org = origin ? origin : point(x + (width / 2), y + (height / 2))\n    const [tl, tr, br, bl] = rotatePoints([\n        point(x, y),\n        point(x + width, y),\n        point(x + width, y + height),\n        point(x, y + height)\n    ], -angle, org)\n\n    const minx = Math.min(tl.x, tr.x, bl.x, br.x)\n    const maxx = Math.max(tl.x, tr.x, bl.x, br.x)\n    const miny = Math.min(tl.y, tr.y, bl.y, br.y)\n    const maxy = Math.max(tl.y, tr.y, bl.y, br.y)\n\n    return {\n        tl,\n        tr,\n        br,\n        bl,\n        aabox: {\n            x: minx,\n            y: miny,\n            width: maxx - minx,\n            height: maxy - miny\n        }\n    }\n}\n\nexport const svgInfo = (\n    ref: SVGSVGElement,\n    _props: '*' | 'width' | 'height' | 'viewBox' = \"*\"\n) => {\n    const svg = ref\n    const box = svg.getBBox()\n    const viewBox = [box.x, box.y, box.width, box.height].join(\" \")\n    const vX = box.x\n    const vY = box.y\n    const vWidth = box.width\n    const vHeight = box.height\n    const width = svg.width.baseVal.value\n    const height = svg.height.baseVal.value\n    const x = svg.x.baseVal.value\n    const y = svg.y.baseVal.value\n\n    return {\n        x,\n        y,\n        width,\n        height,\n        viewBox,\n        vX,\n        vY,\n        vWidth,\n        vHeight,\n    }\n}"],"names":["lineEquation","p1","p2","m","y","x","c","linesDistance","l1","l2","Math","abs","sqrt","distancePointFromLine","p","ls","le","reflectPointOverLine","line","point","arguments","length","Array","isArray","Object","freeze","zeroAjsPoint","NEAR_ZERO","CmpPoint","LESS","EQUAL","MORE","OTHER","cmpPoint","roundPoint","round","absPoint","addPoint","subPoint","divPoint","mulPoint","rotatePoint","angle","origin","radians","PI","cos","sin","rotatePoints","points","map","transformPoint","a","e","b","d","f","transformPoints","isIdentity","matrixMultiply","args","reduceRight","prev","m1","multiply","hasMatrixTransform","tlist","num","numberOfItems","xform","getItem","type","matrix","snapToAngle","x1","y1","x2","y2","snap","dx","dy","atan2","dist","snapangle","rectsIntersect","r1","r2","width","height","toTransformBox","org","tl","tr","br","bl","minx","min","maxx","max","miny","maxy","aabox","svgInfo","ref","_props","svg","box","getBBox","viewBox","join","vX","vY","vWidth","vHeight","baseVal","value"],"mappings":"aAGaA,MAAAA,EAAeA,CAACC,EAAWC,IAA4B,CAChE,MAAMC,GAAKD,EAAGE,EAAIH,EAAGG,IAAMF,EAAGG,EAAIJ,EAAGI,GAC/BC,EAAIL,EAAGG,EAAID,EAAIF,EAAGI,EACjB,MAAA,CAAEF,EAAAA,EAAGG,EAAAA,CAAAA,CAChB,EACaC,EAAgBA,CAACC,EAAkBC,IACrCC,KAAKC,IAAIF,EAAGH,EAAIE,EAAGF,CAAC,EAAII,KAAKE,KAAK,EAAIJ,EAAGL,GAAK,CAAC,EAE7CU,EAAwBA,CAACC,EAAUC,EAAWC,MAElDA,EAAGX,EAAIU,EAAGV,IAAMU,EAAGX,EAAIU,EAAEV,IAAMY,EAAGZ,EAAIW,EAAGX,IAAMW,EAAGV,EAAIS,EAAET,IACzDK,KAAKE,MAAMI,EAAGX,EAAIU,EAAGV,IAAM,GAAKW,EAAGZ,EAAIW,EAAGX,IAAM,CAAC,EAE5Ca,EAAuBA,CAACC,EAAoBC,KAC9C,CACHd,GAAIc,EAAMd,EAAIa,EAAKf,GAAKgB,EAAMf,EAAIc,EAAKZ,KAAO,EAAIY,EAAKf,GAAK,GAC5DC,GAAIc,EAAKf,EAAIgB,EAAMd,EAAIc,EAAMf,EAAI,EAAIc,EAAKZ,IAAM,EAAIY,EAAKf,GAAK,EAAA,GCf/D,SAASgB,GAAQ,CACbC,OAAAA,UAAUC,SAAW,EACxBC,MAAMC,QAAQH,UAAU,CAAC,CAAC,EAAII,OAAOC,OAAO,CAAEpB,EAAGe,UAAU,CAAC,EAAE,CAAC,EAAGhB,EAAGgB,UAAU,CAAC,EAAE,CAAC,CAAA,CAAG,EAChFI,OAAOC,OAAO,CAAEpB,EAAGe,UAAU,CAAC,EAAEf,EAAGD,EAAGgB,UAAU,CAAC,EAAEhB,CAAAA,CAAG,EAE5DoB,OAAOC,OAAO,CAAEpB,EAAGe,UAAU,CAAC,EAAGhB,EAAGgB,UAAU,CAAC,CAAA,CAAG,CAC1D,CACaM,MAAAA,EAAgBP,GAGlBK,OAAOC,OAAO,CACjBpB,EAAGK,KAAKC,IAAIQ,EAAMd,CAAC,EAAIsB,MAAY,EAAIR,EAAMd,EAC7CD,EAAGM,KAAKC,IAAIQ,EAAMf,CAAC,EAAIuB,MAAY,EAAIR,EAAMf,CAAAA,CAChD,EAEOwB,IAAAA,GAAAA,IACRC,EAAAA,EAAAA,KAAO,EAAPA,EAAAA,OACAC,EAAAA,EAAAA,MAAQ,CAARA,EAAAA,QACAC,EAAAA,EAAAA,KAAO,CAAPA,EAAAA,OACAC,EAAAA,EAAAA,MAAQ,CAARA,EAAAA,QAJQJ,IAAAA,GAAAA,CAAAA,CAAAA,EAML,MAAMK,EAAWA,CAAChC,EAAWC,IAAeD,EAAGI,IAAMH,EAAGG,GAAKJ,EAAGG,IAAMF,EAAGE,EAC5EwB,EAAkB3B,EAAGI,EAAIH,EAAGG,GAAKJ,EAAGG,EAAIF,EAAGE,EACvCwB,EAAiB3B,EAAGI,EAAIH,EAAGG,GAAKJ,EAAGG,EAAIF,EAAGE,EACtCwB,GAAgBA,EACfM,EAAcf,GAAiBK,OAAOC,OAAO,CAAEpB,EAAGK,KAAKyB,MAAMhB,EAAMd,CAAC,EAAGD,EAAGM,KAAKyB,MAAMhB,EAAMf,CAAC,CAAE,CAAC,EAC/FgC,EAAYjB,GAAiBK,OAAOC,OAAO,CAAEpB,EAAGK,KAAKC,IAAIQ,EAAMd,CAAC,EAAGD,EAAGM,KAAKC,IAAIQ,EAAMf,CAAC,CAAE,CAAC,EACzFiC,EAAWA,CAACnC,EAAWD,IAAcuB,OAAOC,OAAO,CAAEpB,EAAGH,EAAGG,EAAIJ,EAAGI,EAAGD,EAAGF,EAAGE,EAAIH,EAAGG,CAAE,CAAC,EACrFkC,EAAWA,CAACpC,EAAWD,IAAcuB,OAAOC,OAAO,CAAEpB,EAAGH,EAAGG,EAAIJ,EAAGI,EAAGD,EAAGF,EAAGE,EAAIH,EAAGG,CAAE,CAAC,EACrFmC,EAAWA,CAACrC,EAAWD,IAAcuB,OAAOC,OAAO,CAAEpB,EAAGH,EAAGG,EAAIJ,EAAGI,EAAGD,EAAGF,EAAGE,EAAIH,EAAGG,CAAE,CAAC,EACrFoC,EAAWA,CAACtC,EAAWD,IAAcuB,OAAOC,OAAO,CAAEpB,EAAGH,EAAGG,EAAIJ,EAAGI,EAAGD,EAAGF,EAAGE,EAAIH,EAAGG,CAAE,CAAC,EACrFqC,EAAcA,CAACtB,EAAcuB,EAAeC,IAAkB,CACjEC,MAAAA,EAAWlC,KAAKmC,GAAK,IAAOH,EAC5BI,EAAMpC,KAAKoC,IAAIF,CAAO,EACtBG,EAAMrC,KAAKqC,IAAIH,CAAO,EAE5B,OAAOpB,OAAOC,OAAO,CACjBpB,EAAGyC,GAAO3B,EAAMd,EAAIsC,EAAOtC,GAAK0C,GAAO5B,EAAMf,EAAIuC,EAAOvC,GAAKuC,EAAOtC,EACpED,EAAG0C,GAAO3B,EAAMf,EAAIuC,EAAOvC,GAAK2C,GAAO5B,EAAMd,EAAIsC,EAAOtC,GAAKsC,EAAOvC,CAAAA,CACvE,CACL,EACa4C,EAAeA,CAACC,EAAiBP,EAAeC,IAClDM,EAAOC,IAAI/B,GAASsB,EAAYtB,EAAOuB,EAAOC,CAAM,CAAC,EC5ChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsBA,MAAMhB,EAAY,MAWLwB,EAAiBA,CAAChD,EAAcW,IACzCK,EAAMhB,EAAEiD,EAAItC,EAAET,EAAIF,EAAEG,EAAIQ,EAAEV,EAAID,EAAEkD,EAAGlD,EAAEmD,EAAIxC,EAAET,EAAIF,EAAEoD,EAAIzC,EAAEV,EAAID,EAAEqD,CAAC,EASrDC,EAAkBA,CAACtD,EAAc8C,IACnCA,EAAOC,IAAI/B,GAASgC,EAAehD,EAAGgB,CAAK,CAAC,EAU1CuC,EAAcvD,GAEnBA,EAAEiD,IAAM,GAAKjD,EAAEmD,IAAM,GAAKnD,EAAEG,IAAM,GAAKH,EAAEoD,IAAM,GAAKpD,EAAEkD,IAAM,GAAKlD,EAAEqD,IAAM,EAWpEG,EAAiBA,IAAIC,IAAiC,CAC/D,MAAMzD,EAAIyD,EAAKC,YAAY,CAACC,EAAMC,IACvBA,EAAGC,SAASF,CAAI,CAC1B,EAED,OAAIpD,KAAKC,IAAIR,EAAEiD,CAAC,EAAIzB,IAChBxB,EAAEiD,EAAI,GAEN1C,KAAKC,IAAIR,EAAEmD,CAAC,EAAI3B,IAChBxB,EAAEmD,EAAI,GAEN5C,KAAKC,IAAIR,EAAEG,CAAC,EAAIqB,IAChBxB,EAAEG,EAAI,GAENI,KAAKC,IAAIR,EAAEoD,CAAC,EAAI5B,IAChBxB,EAAEoD,EAAI,GAEN7C,KAAKC,IAAIR,EAAEkD,CAAC,EAAI1B,IAChBxB,EAAEkD,EAAI,GAEN3C,KAAKC,IAAIR,EAAEqD,CAAC,EAAI7B,IAChBxB,EAAEqD,EAAI,GAGHrD,CACX,EAQa8D,EAAsBC,GAA4B,CAC3D,GAAI,CAACA,EACM,MAAA,GAEX,IAAIC,EAAMD,EAAME,cAChB,KAAOD,KAAO,CACJE,MAAAA,EAAQH,EAAMI,QAAQH,CAAG,EAC/B,GAAIE,EAAME,OAAS,GAAK,CAACb,EAAWW,EAAMG,MAAM,EACrC,MAAA,EAEf,CACO,MAAA,EACX,EAqCaC,EAAcA,CAACC,EAAYC,EAAYC,EAAYC,IAAe,CACrEC,MAAAA,EAAOpE,KAAKmC,GAAK,EACjBkC,EAAKH,EAAKF,EACVM,EAAKH,EAAKF,EACVjC,EAAQhC,KAAKuE,MAAMD,EAAID,CAAE,EACzBG,EAAOxE,KAAKE,KAAKmE,EAAKA,EAAKC,EAAKA,CAAE,EAClCG,EAAYzE,KAAKyB,MAAMO,EAAQoC,CAAI,EAAIA,EAEtC,MAAA,CACHzE,EAAGqE,EAAKQ,EAAOxE,KAAKoC,IAAIqC,CAAS,EACjC/E,EAAGuE,EAAKO,EAAOxE,KAAKqC,IAAIoC,CAAS,EACjC/B,EAAG+B,CAAAA,CAEX,EASaC,EAAiBA,CAACC,EAAaC,IAEpCA,EAAGjF,EAAIgF,EAAGhF,EAAIgF,EAAGE,OACjBD,EAAGjF,EAAIiF,EAAGC,MAAQF,EAAGhF,GACrBiF,EAAGlF,EAAIiF,EAAGjF,EAAIiF,EAAGG,QACjBF,EAAGlF,EAAIkF,EAAGE,OAASH,EAAGjF,EAIjBqF,EAAiBA,CAC1BpF,EACAD,EACAmF,EACAC,EACA9C,EAAgB,EAChBC,IACiB,CACX+C,MAAAA,EAAM/C,GAAkBxB,EAAMd,EAAKkF,EAAQ,EAAInF,EAAKoF,EAAS,CAAE,EAC/D,CAACG,EAAIC,EAAIC,EAAIC,CAAE,EAAI9C,EAAa,CAClC7B,EAAMd,EAAGD,CAAC,EACVe,EAAMd,EAAIkF,EAAOnF,CAAC,EAClBe,EAAMd,EAAIkF,EAAOnF,EAAIoF,CAAM,EAC3BrE,EAAMd,EAAGD,EAAIoF,CAAM,CAAC,EACrB,CAAC9C,EAAOgD,CAAG,EAERK,EAAOrF,KAAKsF,IAAIL,EAAGtF,EAAGuF,EAAGvF,EAAGyF,EAAGzF,EAAGwF,EAAGxF,CAAC,EACtC4F,EAAOvF,KAAKwF,IAAIP,EAAGtF,EAAGuF,EAAGvF,EAAGyF,EAAGzF,EAAGwF,EAAGxF,CAAC,EACtC8F,EAAOzF,KAAKsF,IAAIL,EAAGvF,EAAGwF,EAAGxF,EAAG0F,EAAG1F,EAAGyF,EAAGzF,CAAC,EACtCgG,EAAO1F,KAAKwF,IAAIP,EAAGvF,EAAGwF,EAAGxF,EAAG0F,EAAG1F,EAAGyF,EAAGzF,CAAC,EAErC,MAAA,CACHuF,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAO,MAAO,CACHhG,EAAG0F,EACH3F,EAAG+F,EACHZ,MAAOU,EAAOF,EACdP,OAAQY,EAAOD,CACnB,CAAA,CAER,EAEaG,EAAUA,CACnBC,EACAC,EAA+C,MAC9C,CACD,MAAMC,EAAMF,EACNG,EAAMD,EAAIE,UACVC,EAAU,CAACF,EAAIrG,EAAGqG,EAAItG,EAAGsG,EAAInB,MAAOmB,EAAIlB,MAAM,EAAEqB,KAAK,GAAG,EACxDC,EAAKJ,EAAIrG,EACT0G,EAAKL,EAAItG,EACT4G,EAASN,EAAInB,MACb0B,EAAUP,EAAIlB,OACdD,EAAQkB,EAAIlB,MAAM2B,QAAQC,MAC1B3B,EAASiB,EAAIjB,OAAO0B,QAAQC,MAC5B9G,EAAIoG,EAAIpG,EAAE6G,QAAQC,MAClB/G,EAAIqG,EAAIrG,EAAE8G,QAAQC,MAEjB,MAAA,CACH9G,EAAAA,EACAD,EAAAA,EACAmF,MAAAA,EACAC,OAAAA,EACAoB,QAAAA,EACAE,GAAAA,EACAC,GAAAA,EACAC,OAAAA,EACAC,QAAAA,CAAAA,CAER"}